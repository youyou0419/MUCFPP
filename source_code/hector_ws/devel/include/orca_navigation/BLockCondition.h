// Generated by gencpp from file orca_navigation/BLockCondition.msg
// DO NOT EDIT!


#ifndef ORCA_NAVIGATION_MESSAGE_BLOCKCONDITION_H
#define ORCA_NAVIGATION_MESSAGE_BLOCKCONDITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace orca_navigation
{
template <class ContainerAllocator>
struct BLockCondition_
{
  typedef BLockCondition_<ContainerAllocator> Type;

  BLockCondition_()
    : blocker_id()
    , blocked_id()
    , stamp()  {
    }
  BLockCondition_(const ContainerAllocator& _alloc)
    : blocker_id(_alloc)
    , blocked_id(_alloc)
    , stamp()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _blocker_id_type;
  _blocker_id_type blocker_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _blocked_id_type;
  _blocked_id_type blocked_id;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::orca_navigation::BLockCondition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::orca_navigation::BLockCondition_<ContainerAllocator> const> ConstPtr;

}; // struct BLockCondition_

typedef ::orca_navigation::BLockCondition_<std::allocator<void> > BLockCondition;

typedef boost::shared_ptr< ::orca_navigation::BLockCondition > BLockConditionPtr;
typedef boost::shared_ptr< ::orca_navigation::BLockCondition const> BLockConditionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::orca_navigation::BLockCondition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::orca_navigation::BLockCondition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::orca_navigation::BLockCondition_<ContainerAllocator1> & lhs, const ::orca_navigation::BLockCondition_<ContainerAllocator2> & rhs)
{
  return lhs.blocker_id == rhs.blocker_id &&
    lhs.blocked_id == rhs.blocked_id &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::orca_navigation::BLockCondition_<ContainerAllocator1> & lhs, const ::orca_navigation::BLockCondition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace orca_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::orca_navigation::BLockCondition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::orca_navigation::BLockCondition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orca_navigation::BLockCondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::orca_navigation::BLockCondition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orca_navigation::BLockCondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::orca_navigation::BLockCondition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::orca_navigation::BLockCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "159eaf14713728dcfaf35256e7ad2445";
  }

  static const char* value(const ::orca_navigation::BLockCondition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x159eaf14713728dcULL;
  static const uint64_t static_value2 = 0xfaf35256e7ad2445ULL;
};

template<class ContainerAllocator>
struct DataType< ::orca_navigation::BLockCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "orca_navigation/BLockCondition";
  }

  static const char* value(const ::orca_navigation::BLockCondition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::orca_navigation::BLockCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string blocker_id\n"
"string blocked_id\n"
"time stamp\n"
;
  }

  static const char* value(const ::orca_navigation::BLockCondition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::orca_navigation::BLockCondition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.blocker_id);
      stream.next(m.blocked_id);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BLockCondition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::orca_navigation::BLockCondition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::orca_navigation::BLockCondition_<ContainerAllocator>& v)
  {
    s << indent << "blocker_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.blocker_id);
    s << indent << "blocked_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.blocked_id);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORCA_NAVIGATION_MESSAGE_BLOCKCONDITION_H
