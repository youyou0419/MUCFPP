// Generated by gencpp from file quad_star/SimplePathPlanRequest.msg
// DO NOT EDIT!


#ifndef QUAD_STAR_MESSAGE_SIMPLEPATHPLANREQUEST_H
#define QUAD_STAR_MESSAGE_SIMPLEPATHPLANREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quad_star
{
template <class ContainerAllocator>
struct SimplePathPlanRequest_
{
  typedef SimplePathPlanRequest_<ContainerAllocator> Type;

  SimplePathPlanRequest_()
    : start_x(0.0)
    , start_y(0.0)
    , goal_x(0.0)
    , goal_y(0.0)  {
    }
  SimplePathPlanRequest_(const ContainerAllocator& _alloc)
    : start_x(0.0)
    , start_y(0.0)
    , goal_x(0.0)
    , goal_y(0.0)  {
  (void)_alloc;
    }



   typedef float _start_x_type;
  _start_x_type start_x;

   typedef float _start_y_type;
  _start_y_type start_y;

   typedef float _goal_x_type;
  _goal_x_type goal_x;

   typedef float _goal_y_type;
  _goal_y_type goal_y;





  typedef boost::shared_ptr< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SimplePathPlanRequest_

typedef ::quad_star::SimplePathPlanRequest_<std::allocator<void> > SimplePathPlanRequest;

typedef boost::shared_ptr< ::quad_star::SimplePathPlanRequest > SimplePathPlanRequestPtr;
typedef boost::shared_ptr< ::quad_star::SimplePathPlanRequest const> SimplePathPlanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quad_star::SimplePathPlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quad_star::SimplePathPlanRequest_<ContainerAllocator1> & lhs, const ::quad_star::SimplePathPlanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start_x == rhs.start_x &&
    lhs.start_y == rhs.start_y &&
    lhs.goal_x == rhs.goal_x &&
    lhs.goal_y == rhs.goal_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quad_star::SimplePathPlanRequest_<ContainerAllocator1> & lhs, const ::quad_star::SimplePathPlanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quad_star

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "480eff7ac3d8ac00f5d0f116d00eccc9";
  }

  static const char* value(const ::quad_star::SimplePathPlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x480eff7ac3d8ac00ULL;
  static const uint64_t static_value2 = 0xf5d0f116d00eccc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quad_star/SimplePathPlanRequest";
  }

  static const char* value(const ::quad_star::SimplePathPlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 请求消息\n"
"float32 start_x\n"
"float32 start_y\n"
"float32 goal_x\n"
"float32 goal_y\n"
;
  }

  static const char* value(const ::quad_star::SimplePathPlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_x);
      stream.next(m.start_y);
      stream.next(m.goal_x);
      stream.next(m.goal_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimplePathPlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_star::SimplePathPlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quad_star::SimplePathPlanRequest_<ContainerAllocator>& v)
  {
    s << indent << "start_x: ";
    Printer<float>::stream(s, indent + "  ", v.start_x);
    s << indent << "start_y: ";
    Printer<float>::stream(s, indent + "  ", v.start_y);
    s << indent << "goal_x: ";
    Printer<float>::stream(s, indent + "  ", v.goal_x);
    s << indent << "goal_y: ";
    Printer<float>::stream(s, indent + "  ", v.goal_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUAD_STAR_MESSAGE_SIMPLEPATHPLANREQUEST_H
