// Generated by gencpp from file uav_control/LDRInfoArray.msg
// DO NOT EDIT!


#ifndef UAV_CONTROL_MESSAGE_LDRINFOARRAY_H
#define UAV_CONTROL_MESSAGE_LDRINFOARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uav_control/LDRInfo.h>

namespace uav_control
{
template <class ContainerAllocator>
struct LDRInfoArray_
{
  typedef LDRInfoArray_<ContainerAllocator> Type;

  LDRInfoArray_()
    : ldr_infos()  {
    }
  LDRInfoArray_(const ContainerAllocator& _alloc)
    : ldr_infos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::uav_control::LDRInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::uav_control::LDRInfo_<ContainerAllocator> >> _ldr_infos_type;
  _ldr_infos_type ldr_infos;





  typedef boost::shared_ptr< ::uav_control::LDRInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_control::LDRInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct LDRInfoArray_

typedef ::uav_control::LDRInfoArray_<std::allocator<void> > LDRInfoArray;

typedef boost::shared_ptr< ::uav_control::LDRInfoArray > LDRInfoArrayPtr;
typedef boost::shared_ptr< ::uav_control::LDRInfoArray const> LDRInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_control::LDRInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_control::LDRInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_control::LDRInfoArray_<ContainerAllocator1> & lhs, const ::uav_control::LDRInfoArray_<ContainerAllocator2> & rhs)
{
  return lhs.ldr_infos == rhs.ldr_infos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_control::LDRInfoArray_<ContainerAllocator1> & lhs, const ::uav_control::LDRInfoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_control::LDRInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_control::LDRInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::LDRInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::LDRInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::LDRInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::LDRInfoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_control::LDRInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e49ba5991a82a17025c4ca6b278a4e1";
  }

  static const char* value(const ::uav_control::LDRInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e49ba5991a82a17ULL;
  static const uint64_t static_value2 = 0x025c4ca6b278a4e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_control::LDRInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_control/LDRInfoArray";
  }

  static const char* value(const ::uav_control::LDRInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_control::LDRInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_control/LDRInfo[] ldr_infos\n"
"================================================================================\n"
"MSG: uav_control/LDRInfo\n"
"string[] uav_ids\n"
"geometry_msgs/Point[] positions\n"
"float64 min_x\n"
"float64 max_x\n"
"float64 min_y\n"
"float64 max_y\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uav_control::LDRInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_control::LDRInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ldr_infos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LDRInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_control::LDRInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_control::LDRInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "ldr_infos[]" << std::endl;
    for (size_t i = 0; i < v.ldr_infos.size(); ++i)
    {
      s << indent << "  ldr_infos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::uav_control::LDRInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.ldr_infos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_CONTROL_MESSAGE_LDRINFOARRAY_H
