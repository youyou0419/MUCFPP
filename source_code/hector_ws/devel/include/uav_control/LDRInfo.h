// Generated by gencpp from file uav_control/LDRInfo.msg
// DO NOT EDIT!


#ifndef UAV_CONTROL_MESSAGE_LDRINFO_H
#define UAV_CONTROL_MESSAGE_LDRINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace uav_control
{
template <class ContainerAllocator>
struct LDRInfo_
{
  typedef LDRInfo_<ContainerAllocator> Type;

  LDRInfo_()
    : uav_ids()
    , positions()
    , min_x(0.0)
    , max_x(0.0)
    , min_y(0.0)
    , max_y(0.0)  {
    }
  LDRInfo_(const ContainerAllocator& _alloc)
    : uav_ids(_alloc)
    , positions(_alloc)
    , min_x(0.0)
    , max_x(0.0)
    , min_y(0.0)
    , max_y(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _uav_ids_type;
  _uav_ids_type uav_ids;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _positions_type;
  _positions_type positions;

   typedef double _min_x_type;
  _min_x_type min_x;

   typedef double _max_x_type;
  _max_x_type max_x;

   typedef double _min_y_type;
  _min_y_type min_y;

   typedef double _max_y_type;
  _max_y_type max_y;





  typedef boost::shared_ptr< ::uav_control::LDRInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_control::LDRInfo_<ContainerAllocator> const> ConstPtr;

}; // struct LDRInfo_

typedef ::uav_control::LDRInfo_<std::allocator<void> > LDRInfo;

typedef boost::shared_ptr< ::uav_control::LDRInfo > LDRInfoPtr;
typedef boost::shared_ptr< ::uav_control::LDRInfo const> LDRInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_control::LDRInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_control::LDRInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_control::LDRInfo_<ContainerAllocator1> & lhs, const ::uav_control::LDRInfo_<ContainerAllocator2> & rhs)
{
  return lhs.uav_ids == rhs.uav_ids &&
    lhs.positions == rhs.positions &&
    lhs.min_x == rhs.min_x &&
    lhs.max_x == rhs.max_x &&
    lhs.min_y == rhs.min_y &&
    lhs.max_y == rhs.max_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_control::LDRInfo_<ContainerAllocator1> & lhs, const ::uav_control::LDRInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_control::LDRInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_control::LDRInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::LDRInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::LDRInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::LDRInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::LDRInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_control::LDRInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f8c645ab0d7e706bc2196262140227e";
  }

  static const char* value(const ::uav_control::LDRInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f8c645ab0d7e706ULL;
  static const uint64_t static_value2 = 0xbc2196262140227eULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_control::LDRInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_control/LDRInfo";
  }

  static const char* value(const ::uav_control::LDRInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_control::LDRInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] uav_ids\n"
"geometry_msgs/Point[] positions\n"
"float64 min_x\n"
"float64 max_x\n"
"float64 min_y\n"
"float64 max_y\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uav_control::LDRInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_control::LDRInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uav_ids);
      stream.next(m.positions);
      stream.next(m.min_x);
      stream.next(m.max_x);
      stream.next(m.min_y);
      stream.next(m.max_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LDRInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_control::LDRInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_control::LDRInfo_<ContainerAllocator>& v)
  {
    s << indent << "uav_ids[]" << std::endl;
    for (size_t i = 0; i < v.uav_ids.size(); ++i)
    {
      s << indent << "  uav_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uav_ids[i]);
    }
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.positions[i]);
    }
    s << indent << "min_x: ";
    Printer<double>::stream(s, indent + "  ", v.min_x);
    s << indent << "max_x: ";
    Printer<double>::stream(s, indent + "  ", v.max_x);
    s << indent << "min_y: ";
    Printer<double>::stream(s, indent + "  ", v.min_y);
    s << indent << "max_y: ";
    Printer<double>::stream(s, indent + "  ", v.max_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_CONTROL_MESSAGE_LDRINFO_H
