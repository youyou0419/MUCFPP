// Generated by gencpp from file uav_control/ResolutionStatus.msg
// DO NOT EDIT!


#ifndef UAV_CONTROL_MESSAGE_RESOLUTIONSTATUS_H
#define UAV_CONTROL_MESSAGE_RESOLUTIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_control
{
template <class ContainerAllocator>
struct ResolutionStatus_
{
  typedef ResolutionStatus_<ContainerAllocator> Type;

  ResolutionStatus_()
    : ldr_id(0)
    , uav_ids()
    , in_resolution(false)
    , aabb_min_x(0.0)
    , aabb_max_x(0.0)
    , aabb_min_y(0.0)
    , aabb_max_y(0.0)  {
    }
  ResolutionStatus_(const ContainerAllocator& _alloc)
    : ldr_id(0)
    , uav_ids(_alloc)
    , in_resolution(false)
    , aabb_min_x(0.0)
    , aabb_max_x(0.0)
    , aabb_min_y(0.0)
    , aabb_max_y(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _ldr_id_type;
  _ldr_id_type ldr_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _uav_ids_type;
  _uav_ids_type uav_ids;

   typedef uint8_t _in_resolution_type;
  _in_resolution_type in_resolution;

   typedef double _aabb_min_x_type;
  _aabb_min_x_type aabb_min_x;

   typedef double _aabb_max_x_type;
  _aabb_max_x_type aabb_max_x;

   typedef double _aabb_min_y_type;
  _aabb_min_y_type aabb_min_y;

   typedef double _aabb_max_y_type;
  _aabb_max_y_type aabb_max_y;





  typedef boost::shared_ptr< ::uav_control::ResolutionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_control::ResolutionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ResolutionStatus_

typedef ::uav_control::ResolutionStatus_<std::allocator<void> > ResolutionStatus;

typedef boost::shared_ptr< ::uav_control::ResolutionStatus > ResolutionStatusPtr;
typedef boost::shared_ptr< ::uav_control::ResolutionStatus const> ResolutionStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_control::ResolutionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_control::ResolutionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_control::ResolutionStatus_<ContainerAllocator1> & lhs, const ::uav_control::ResolutionStatus_<ContainerAllocator2> & rhs)
{
  return lhs.ldr_id == rhs.ldr_id &&
    lhs.uav_ids == rhs.uav_ids &&
    lhs.in_resolution == rhs.in_resolution &&
    lhs.aabb_min_x == rhs.aabb_min_x &&
    lhs.aabb_max_x == rhs.aabb_max_x &&
    lhs.aabb_min_y == rhs.aabb_min_y &&
    lhs.aabb_max_y == rhs.aabb_max_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_control::ResolutionStatus_<ContainerAllocator1> & lhs, const ::uav_control::ResolutionStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_control::ResolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_control::ResolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::ResolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::ResolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::ResolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::ResolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_control::ResolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68d9e3003f30b6e4832b7d80035318cd";
  }

  static const char* value(const ::uav_control::ResolutionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68d9e3003f30b6e4ULL;
  static const uint64_t static_value2 = 0x832b7d80035318cdULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_control::ResolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_control/ResolutionStatus";
  }

  static const char* value(const ::uav_control::ResolutionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_control::ResolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ResolutionStatus.msg\n"
"# LDR Resolution状态消息定义\n"
"\n"
"\n"
"# LDR标识符\n"
"int32 ldr_id\n"
"\n"
"# 涉及的无人机ID列表\n"
"string[] uav_ids\n"
"\n"
"# Resolution状态：true表示进入Resolution阶段，false表示退出\n"
"bool in_resolution\n"
"\n"
"\n"
"# LDR区域边界信息\n"
"float64 aabb_min_x\n"
"float64 aabb_max_x  \n"
"float64 aabb_min_y\n"
"float64 aabb_max_y\n"
;
  }

  static const char* value(const ::uav_control::ResolutionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_control::ResolutionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ldr_id);
      stream.next(m.uav_ids);
      stream.next(m.in_resolution);
      stream.next(m.aabb_min_x);
      stream.next(m.aabb_max_x);
      stream.next(m.aabb_min_y);
      stream.next(m.aabb_max_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResolutionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_control::ResolutionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_control::ResolutionStatus_<ContainerAllocator>& v)
  {
    s << indent << "ldr_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ldr_id);
    s << indent << "uav_ids[]" << std::endl;
    for (size_t i = 0; i < v.uav_ids.size(); ++i)
    {
      s << indent << "  uav_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uav_ids[i]);
    }
    s << indent << "in_resolution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_resolution);
    s << indent << "aabb_min_x: ";
    Printer<double>::stream(s, indent + "  ", v.aabb_min_x);
    s << indent << "aabb_max_x: ";
    Printer<double>::stream(s, indent + "  ", v.aabb_max_x);
    s << indent << "aabb_min_y: ";
    Printer<double>::stream(s, indent + "  ", v.aabb_min_y);
    s << indent << "aabb_max_y: ";
    Printer<double>::stream(s, indent + "  ", v.aabb_max_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_CONTROL_MESSAGE_RESOLUTIONSTATUS_H
