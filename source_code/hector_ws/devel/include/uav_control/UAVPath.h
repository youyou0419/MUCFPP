// Generated by gencpp from file uav_control/UAVPath.msg
// DO NOT EDIT!


#ifndef UAV_CONTROL_MESSAGE_UAVPATH_H
#define UAV_CONTROL_MESSAGE_UAVPATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace uav_control
{
template <class ContainerAllocator>
struct UAVPath_
{
  typedef UAVPath_<ContainerAllocator> Type;

  UAVPath_()
    : uav_id()
    , path_points()
    , time_indices()  {
    }
  UAVPath_(const ContainerAllocator& _alloc)
    : uav_id(_alloc)
    , path_points(_alloc)
    , time_indices(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uav_id_type;
  _uav_id_type uav_id;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _path_points_type;
  _path_points_type path_points;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _time_indices_type;
  _time_indices_type time_indices;





  typedef boost::shared_ptr< ::uav_control::UAVPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_control::UAVPath_<ContainerAllocator> const> ConstPtr;

}; // struct UAVPath_

typedef ::uav_control::UAVPath_<std::allocator<void> > UAVPath;

typedef boost::shared_ptr< ::uav_control::UAVPath > UAVPathPtr;
typedef boost::shared_ptr< ::uav_control::UAVPath const> UAVPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_control::UAVPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_control::UAVPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uav_control::UAVPath_<ContainerAllocator1> & lhs, const ::uav_control::UAVPath_<ContainerAllocator2> & rhs)
{
  return lhs.uav_id == rhs.uav_id &&
    lhs.path_points == rhs.path_points &&
    lhs.time_indices == rhs.time_indices;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uav_control::UAVPath_<ContainerAllocator1> & lhs, const ::uav_control::UAVPath_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uav_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uav_control::UAVPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_control::UAVPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::UAVPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::UAVPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::UAVPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::UAVPath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_control::UAVPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11d1db57573332d6454c162bb2bcf71b";
  }

  static const char* value(const ::uav_control::UAVPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11d1db57573332d6ULL;
  static const uint64_t static_value2 = 0x454c162bb2bcf71bULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_control::UAVPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_control/UAVPath";
  }

  static const char* value(const ::uav_control::UAVPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_control::UAVPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 单个无人机的路径信息\n"
"# 文件路径: uav_control/msg/UAVPath.msg\n"
"\n"
"string uav_id\n"
"geometry_msgs/Point[] path_points\n"
"int32[] time_indices\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uav_control::UAVPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_control::UAVPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uav_id);
      stream.next(m.path_points);
      stream.next(m.time_indices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UAVPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_control::UAVPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_control::UAVPath_<ContainerAllocator>& v)
  {
    s << indent << "uav_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uav_id);
    s << indent << "path_points[]" << std::endl;
    for (size_t i = 0; i < v.path_points.size(); ++i)
    {
      s << indent << "  path_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.path_points[i]);
    }
    s << indent << "time_indices[]" << std::endl;
    for (size_t i = 0; i < v.time_indices.size(); ++i)
    {
      s << indent << "  time_indices[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.time_indices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_CONTROL_MESSAGE_UAVPATH_H
