# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uav_control/ResolutionStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ResolutionStatus(genpy.Message):
  _md5sum = "68d9e3003f30b6e4832b7d80035318cd"
  _type = "uav_control/ResolutionStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ResolutionStatus.msg
# LDR Resolution状态消息定义


# LDR标识符
int32 ldr_id

# 涉及的无人机ID列表
string[] uav_ids

# Resolution状态：true表示进入Resolution阶段，false表示退出
bool in_resolution


# LDR区域边界信息
float64 aabb_min_x
float64 aabb_max_x  
float64 aabb_min_y
float64 aabb_max_y"""
  __slots__ = ['ldr_id','uav_ids','in_resolution','aabb_min_x','aabb_max_x','aabb_min_y','aabb_max_y']
  _slot_types = ['int32','string[]','bool','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ldr_id,uav_ids,in_resolution,aabb_min_x,aabb_max_x,aabb_min_y,aabb_max_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ResolutionStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ldr_id is None:
        self.ldr_id = 0
      if self.uav_ids is None:
        self.uav_ids = []
      if self.in_resolution is None:
        self.in_resolution = False
      if self.aabb_min_x is None:
        self.aabb_min_x = 0.
      if self.aabb_max_x is None:
        self.aabb_max_x = 0.
      if self.aabb_min_y is None:
        self.aabb_min_y = 0.
      if self.aabb_max_y is None:
        self.aabb_max_y = 0.
    else:
      self.ldr_id = 0
      self.uav_ids = []
      self.in_resolution = False
      self.aabb_min_x = 0.
      self.aabb_max_x = 0.
      self.aabb_min_y = 0.
      self.aabb_max_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ldr_id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.uav_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.uav_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_B4d().pack(_x.in_resolution, _x.aabb_min_x, _x.aabb_max_x, _x.aabb_min_y, _x.aabb_max_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.ldr_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uav_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.uav_ids.append(val1)
      _x = self
      start = end
      end += 33
      (_x.in_resolution, _x.aabb_min_x, _x.aabb_max_x, _x.aabb_min_y, _x.aabb_max_y,) = _get_struct_B4d().unpack(str[start:end])
      self.in_resolution = bool(self.in_resolution)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ldr_id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.uav_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.uav_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_B4d().pack(_x.in_resolution, _x.aabb_min_x, _x.aabb_max_x, _x.aabb_min_y, _x.aabb_max_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.ldr_id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uav_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.uav_ids.append(val1)
      _x = self
      start = end
      end += 33
      (_x.in_resolution, _x.aabb_min_x, _x.aabb_max_x, _x.aabb_min_y, _x.aabb_max_y,) = _get_struct_B4d().unpack(str[start:end])
      self.in_resolution = bool(self.in_resolution)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4d = None
def _get_struct_B4d():
    global _struct_B4d
    if _struct_B4d is None:
        _struct_B4d = struct.Struct("<B4d")
    return _struct_B4d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
